{# snippet 'snippets/shop-now-js.rain' #}

<script type="text/javascript">
/*
 * V1.5.4 - Date 9-5-2016 *Bugfix B2B shopnow_updateForm
 *
 * Changelog
 * 1.5.3 - Date 5-5-2016 *Verbeteringen voor getPriceFromText
 * 1.5.2 - Date 24-11-2015 *Verbeteringen voor HTTPS
 * 1.5.1 - Date 20-11-2015 *Verbeteringen voor HTTPS
 * 1.5 - Date 30-10-2015 *Ondersteuning voor HTTPS (main.js is vereist) - versie 1.5 omdat vorige versies niet meer te vinden zijn.
 * 1.3.2 - Date 26-06-2015 *datum toegevoegd als custom field
 * 1.3.1 - Date 4-06-2015 *review sterren verplaatst in popup
 */
    $(document).ready(function() {
        $('a.shopnow').click(function(event) {
            event.preventDefault();
            var cartAtts = {
                popupSelector: '#shopnow-products',
                addToCartUrlPrefix: 'cart/add/',
                addToCartButtonValue: 'Toevoegen aan de winkelwagen',
                closeCartButtonValue: 'Sluiten',
                id: (this.id),
              //urlJson: '{% if shop.languages | length > 1 %}{{ shop.language }}/{% endif %}' + (this.id) + '?format=json',
              //urlAjax: '{% if shop.languages | length > 1 %}{{ shop.language }}/{% endif %}' + (this.id.replace('.html', '.ajax')) + '',
                urlJson: (this.id) + '?format=json',
                urlAjax: (this.id.replace('.html', '.ajax')) + '',
                shopId: '{{ shop.id }}',
                shopDomain: '{{ shop.domain }}',
                shopDomainNormal: '{{ shop.domains.normal }}',
                shopDomainSecure: '{{ shop.domains.secure }}',
            };
            if (window.location.protocol == "https:") {
              cartAtts.shopDomain = cartAtts.shopDomainSecure;
              cartAtts.urlJson = cartAtts.shopDomainSecure + cartAtts.urlJson;
              cartAtts.urlAjax = cartAtts.shopDomainSecure + cartAtts.urlAjax;
            } else {
              cartAtts.shopDomain = cartAtts.shopDomainNormal;
              cartAtts.urlJson = cartAtts.shopDomainNormal + cartAtts.urlJson;
              cartAtts.urlAjax = cartAtts.shopDomainNormal + cartAtts.urlAjax;
            }
            shopnow_popupProductCart(cartAtts);
        });
    });

function shopnow_popupProductCart(cartAtts) {
    $(cartAtts.popupSelector).html('{{ "Loading" | t }}');
    $(cartAtts.popupSelector).fadeIn('fast');
    $.get(cartAtts.urlJson, function(data) {
        $.get(cartAtts.urlAjax, function(dataProduct) {
            var defaultCurrency = data.product.price.price_incl;
            defaultCurrency = defaultCurrency * 100;
            defaultCurrency = parseInt(defaultCurrency);
            var selectedCurrency = dataProduct.price.price_incl_money_without_currency;
            selectedCurrency = selectedCurrency.toString().replace(',', '').replace('.', '');
            selectedCurrency = parseInt(selectedCurrency);
            data.customPriceConversion = defaultCurrency / selectedCurrency;
            data.shop.settings.legal.uvpHTML = '<span class="uvp">{{ ' SRP ' | t }}</span>';
            var popupHtml = '';
            var productId = data.product.vid;
            var imgId = data.product.image;
            var imgUrlId = imgId.toString();
            while (imgUrlId.length < 9) {
                imgUrlId = '0' + imgUrlId;
            }
            var imgUrl = data.shop.domains.static + 'files/' + imgUrlId + '/150x150x2/image.jpg';
            var productTitle = data.product.fulltitle;
            var productUrl = data.product.url;
            var shopDomain = data.shop.domain;
            popupHtml += '<a href="#" class="close"><span class="glyphicon glyphicon-remove"></span></a>';
            popupHtml += '<div class="col-md-12 col-sm-12 text-center"><div class="title">' + productTitle + '</div> <div class="img paddingmd"><img src="' + imgUrl + '" alt="' + productTitle + '" title="' + productTitle + '" width="150" height="150" /></div></div>';
            popupHtml += shopnow_getCartFormHTML(data, dataProduct, cartAtts);
            $(cartAtts.popupSelector).html(popupHtml);
            if (data.product.stock.available == false) {
                $.each(data.product.variants, function(index, value) {
                    if (this.stock.available == true) {
                        $(cartAtts.popupSelector + ' .popup-product-variants').val(index);
                        shopnow_updateForm(data, dataProduct, cartAtts, $(cartAtts.popupSelector + ' .popup-product-variants'));
                        return false;
                    }
                });
            }
            $(cartAtts.popupSelector + ' .popup-product-variants').change(function() {
                shopnow_updateForm(data, dataProduct, cartAtts, $(this));
            });
            $(cartAtts.popupSelector + ' .product-configure-custom .product-configure-custom-option').each(function() {
                $(this).find('input[type="checkbox"]').each(function() {
                    $(this).change(function() {
                        shopnow_updateForm(data, dataProduct, cartAtts, $(this));
                    });
                });
                $(this).find('input[type="radio"]').each(function() {
                    $(this).change(function() {
                        shopnow_updateForm(data, dataProduct, cartAtts, $(this));
                    });
                });
                $(this).find('select').each(function() {
                    $(this).change(function() {
                        shopnow_updateForm(data, dataProduct, cartAtts, $(this));
                    });
                });
            })
            $(cartAtts.popupSelector + ' a.add-to-cart').click(function(event) {
                $(cartAtts.popupSelector + ' .errorRow').remove();
                event.preventDefault();
                var ajaxUrl = $(cartAtts.popupSelector + ' #product_configure_form').attr('action');
                var formData = $(cartAtts.popupSelector + ' #product_configure_form').serializeObject();
                var loadUrl = ajaxUrl;
                var continueAjax = true;
                var errorHTML = '';
                if (dataProduct.stock.allow_outofstock_sale == true) {
                    continueAjax = true;
                } else {
                    if (parseInt(formData.quantity) <= dataProduct.stock.level) {
                        continueAjax = true;
                    } else {
                        continueAjax = false;
                        var errorStr = '{{ "Er zijn maar %s producten op voorraad, wil je deze toevoegen aan de winkelwagen?" | t }}';
                        errorHTML += '<div class="col-md-12 col-sm-12 grey errorRow paddingsm text-center">';
                        errorHTML += '<ul class="error">' + errorStr.replace('%s', dataProduct.stock.level) + '</ul>';
                        errorHTML += '<a href="#" class="btn btn-md btn-view verder"><span>{{ "Nee, verder winkelen" | t }}</span></a> ';
                        errorHTML += '<a href="#" class="btn btn-md btn-view add"><span>{{ "Ja, in winkelwagen" | t }}</span></a> ';
                        errorHTML += '</div>';
                        $(cartAtts.popupSelector + ' #product_configure_form').append(errorHTML);
                        $(cartAtts.popupSelector + ' .errorRow .btn.verder').click(function(event) {
                            event.preventDefault();
                            shopnow_clearSelf(cartAtts);
                        });
                        $(cartAtts.popupSelector + ' .errorRow .btn.add').click(function(event) {
                            event.preventDefault();
                            formData.quantity = String(dataProduct.stock.level);
                            shopnow_addToCart(loadUrl, formData, cartAtts);
                            $(cartAtts.popupSelector + ' .errorRow').remove();
                        });
                    }
                }
                if (continueAjax == true) {
                    shopnow_addToCart(loadUrl, formData, cartAtts);
                }
            });
            $(cartAtts.popupSelector + ' a.close, ' + cartAtts.popupSelector + ' a.verder').click(function(event) {
                event.preventDefault();
                shopnow_clearSelf(cartAtts);
            });
        });
    });
}

function shopnow_clearSelf(cartAtts) {
    $(cartAtts.popupSelector).fadeOut('fast');
    $(cartAtts.popupSelector).html('');
}

function shopnow_addToCart(loadUrl, formData, cartAtts) {
    if (window.location.protocol == "https:") {
      loadUrl = loadUrl.replace(cartAtts.shopDomainNormal, cartAtts.shopDomainSecure);
    }
    $('<div id="loadedContentAdToCard"></div>').load(loadUrl, formData, function() {
        var returnPage = $(this);
        var errors = returnPage.find('.messages .error');
        var info = returnPage.find('.messages .info');
        if (errors.length > 0) {
            $(cartAtts.popupSelector + ' #product_configure_form .messages').remove();
            $(cartAtts.popupSelector + ' #product_configure_form').prepend('<div class="messages"><ul class="error">' + errors.html() + '</ul></div>');
        } else {
            updateHeaderCartHTML(returnPage);
            var popupSuccessContent = '';
            if (info.length > 0) {
                popupSuccessContent += '<div class="text-center col-md-12 col-sm-12 paddingsm"><div class="messages"><ul class="info">' + info.html() + '</ul></div></div>';
            }
            popupSuccessContent += '<div class="text-center col-md-12 col-sm-12 paddingsm">{{ "Dit product is toegevoegd aan de winkelwagen." | t }}</div>';
            $(cartAtts.popupSelector + ' .content').html(popupSuccessContent);
            var succesHTML = '';
            succesHTML += ' <a href="#" class="btn btn-md btn-view verder" title="{{ "Verder winkelen" | t }}"><span>{{ "Verder winkelen" | t }}</span></a> ';
            succesHTML += ' <a href="{{ "/cart" | url }}" class="btn btn-md btn-view checkout"><span>{{ "Bestellen" | t }}</span></a> ';
            $(cartAtts.popupSelector + ' .succesRow').html(succesHTML);
            $(cartAtts.popupSelector + ' .succesRow .btn.verder').click(function(event) {
                event.preventDefault();
                shopnow_clearSelf(cartAtts);
            });
        }
        $(this).remove();
    });
}

function shopnow_updateHeaderCartHTML(page) {
    var newCartContent = $(page).find('#cartContainer');
    $('#cartContainer a.cart').html(newCartContent.find('a.cart').html());
    $('#cartContainer .view-cart').html(newCartContent.find('.view-cart').html());
    if (typeof updateCartContainerTotalQuantity == 'function') {
        updateCartContainerTotalQuantity();
    }
}

function shopnow_getCartFormHTML(data, dataProduct, cartAtts) {
    var product = data.product;
    var shop = data.shop;
    var html = '';
    var actionUrlBase = cartAtts.shopDomainNormal;
    if (window.location.protocol == "https:") {
      actionUrlBase = actionUrlBase.replace(cartAtts.shopDomainNormal, cartAtts.shopDomainSecure);
    }
    html += '<form action="' + actionUrlBase + cartAtts.addToCartUrlPrefix + product.vid + '/" id="product_configure_form" method="post">';
    html += '<div class="col-md-12 col-sm-12 nopadding content">';
    html += '<div class="col-md-6 col-sm-6 content-info">';
    if (productReview != false) {
        var productReview = data.product.score;
        var productReviewResult = +(productReview * 100).toFixed(8);
        html += '<p class="stars"><span class="stars-percent" style="width: ' + productReviewResult + '%"></span></p>';
    };
    if (ObjectLength(shop.languages) > 1) {
      // + '' + data.shop.language + '/'
        html += '<div class="description paddingsm">' + data.product.description + '<br /><br /><a href="' + actionUrlBase + data.product.url + '" class="btn btn-xs btn-default">{{ "More information" | t }}</a></div>';
    } else {
        html += '<div class="description paddingsm">' + data.product.description + '<br /><br /><a href="' + actionUrlBase + data.product.url + '" class="btn btn-xs btn-default">{{ "More information" | t }}</a></div>';
    };
    html += '</div>';
    html += '<div class="col-md-6 col-sm-6 content-cart">';
    html += '<div class="product-configure tui">';
    html += '<input name="bundle_id" id="product_configure_bundle_id" value="" type="hidden">';
    html += shopnow_getCartVariantsHTML(data, dataProduct);
    html += shopnow_getCartCustomOptionsHTML(data, dataProduct);
    html += '</div>';
    html += shopnow_getCartPricesHTML(data, dataProduct);
    html += shopnow_getCartQuantityHTML(data, dataProduct);
    if (product.stock.available == true) {
        html += '<div class="col-md-6 col-sm-6  nopadding pull-left"><a href="javascript:;" data-id="' + product.vid + '" class="btn btn-md btn-view add-to-cart pull-left" title="{{ "Add to cart" | t }}">';
        html += '<span>{{ "Add to cart" | t }}</span>';
        html += '</a>';
        html += '<span class="out-of-stock" style="display: none;">{{ "Out of stock" | t }}</span></div>';
    } else {
        html += '<div class="col-md-6 col-sm-6  nopadding pull-left"><a href="javascript:;" data-id="' + product.vid + '" class="btn btn-md btn-view add-to-cart pull-left" title="{{ "Add to cart" | t }}" style="display: none;">';
        html += '<span>{{ "Add to cart" | t }}</span>';
        html += '</a>';
        html += '<span class="out-of-stock">{{ "Out of stock" | t }}</span></div>';
    };
    html += '</div>';
    html += '</form>';
    return html;
}

function shopnow_getCartVariantsHTML(data, dataProduct) {
    var product = data.product;
    var shop = data.shop;
    var html = '';
    html += '<div class="product-info-options product-configure-options tui">';
    if (ObjectLength(product.variants) > 1) {
        html += '<select class="popup-product-variants">';
        $.each(product.variants, function(index, value) {
            if (this.stock.available == true) {
                html += '<option value="' + index + '">' + value.title + '</option>';
            } else {
                html += '<option value="' + index + '" class="out" disabled>' + value.title + '</option>';
            }
        });
        html += '</select>';
    } else {
        html += product.variant;
    }
    html += '</div>';
    return html;
}

function shopnow_getCartCustomOptionsHTML(data, dataProduct) {
    var product = data.product;
    var shop = data.shop;
    var html = '';
    if (ObjectLength(product.custom) >= 1) {
        html += '<div class="product-info-custom product-configure-custom tui">';
        $.each(product.custom, function(index, value) {
            html += '<div class="product-configure-custom-option ' + index + ' ' + value.type + '">';
            var required = '';
            if (value.required == true) {
                required = ' <em>*</em>';
            }
            switch (value.type) {
                case 'text':
                    html += '<label for="product_configure_custom_' + index + '">' + value.title + ':' + required + '</label>';
                    html += '<input type="text" name="custom[' + index + ']" id="product_configure_custom_' + index + '" />';
                    break;
                case 'textarea':
                    html += '<label for="product_configure_custom_' + index + '">' + value.title + ':' + required + '</label>';
                    html += '<textarea type="text" name="custom[' + index + ']" id="product_configure_custom_' + index + '" />';
                    break;
                case 'multipleselect':
                    html += '<label for="product_configure_custom_' + index + '">' + value.title + ':' + required + '</label>';
                    html += '<select name="custom[' + index + '][]" id="product_configure_custom_' + index + '" multiple="multiple">';
                    $.each(value.values, function(childindex, childvalue) {
                        var price = shopnow_formatOptionPrice(childvalue, data);
                        html += '<option value="' + childindex + '" data-price="' + childvalue.price + '">' + childvalue.title + price + '</option>';
                    });
                    html += '</select>';
                    break;
                case 'select':
                    html += '<label for="product_configure_custom_' + index + '">' + value.title + ':' + required + '</label>';
                    html += '<select name="custom[' + index + ']" id="product_configure_custom_' + index + '">';
                    html += '<option value="" disabled="disabled" selected="selected">{{ "Make a choice.." | t }}</option>';
                    $.each(value.values, function(childindex, childvalue) {
                        var price = shopnow_formatOptionPrice(childvalue, data);
                        html += '<option value="' + childindex + '" data-price="' + childvalue.price + '">' + childvalue.title + price + '</option>';
                    });
                    html += '</select>';
                    break;
                case 'checkbox':
                    html += '<label>' + value.title + ':' + required + '</label>';
                    $.each(value.values, function(childindex, childvalue) {
                        var price = shopnow_formatOptionPrice(childvalue, data);
                        html += '<div class="product-configure-custom-option-item">';
                        html += '<input type="checkbox" name="custom[' + index + '][]" id="product_configure_custom_' + index + '_' + childindex + '" class="product_configure_custom_' + index + '" data-price="' + childvalue.price + '" value="' + childindex + '" />';
                        html += '<label for="product_configure_custom_' + index + '_' + childindex + '">' + childvalue.title + price + '</label>';
                        html += '<div class="product-configure-clear"></div>';
                        html += '</div>';
                    });
                    break;
                case 'radio':
                    html += '<label>' + value.title + ':' + required + '</label>';
                    $.each(value.values, function(childindex, childvalue) {
                        var price = shopnow_formatOptionPrice(childvalue, data);
                        html += '<div class="product-configure-custom-option-item">';
                        html += '<input type="radio" name="custom[' + index + ']" id="product_configure_custom_' + index + '_' + childindex + '" class="product_configure_custom_' + index + '" data-price="' + childvalue.price + '" value="' + childindex + '" />';
                        html += '<label for="product_configure_custom_' + index + '_' + childindex + '">' + childvalue.title + price + '</label>';
                        html += '<div class="product-configure-clear"></div>';
                        html += '</div>';
                    });
                    break;
                case 'date':
                    html += '<label for="product_configure_custom_' + index + '">' + value.title + ':' + required + '</label>';
                    html += '<div class="product-configure-custom-option-item">';
                    html += '<div class="product-configure-custom-option-date">';
                    html += '<select name="custom[' + index + '][day]" class="product-configure-custom-option-date-day">';
                    for (var i = 0; i <= 31; i++) {
                        if (i == 0) {
                            html += '<option value="">{{ "Day" | t }}</option>';
                        } else {
                            html += '<option value="' + i + '">' + i + '</option>';
                        }
                    }
                    html += '</select>';
                    html += '<select name="custom[' + index + '][month]" class="product-configure-custom-option-date-month">';
                    var monthNames = new Array('', '{{ "January" | t }}', '{{ "February" | t }}', '{{ "March" | t }}', '{{ "April" | t }}', '{{ "May" | t }}', '{{ "June" | t }}', '{{ "July" | t }}', '{{ "August" | t }}', '{{ "September" | t }}', '{{ "October" | t }}', '{{ "November" | t }}', '{{ "December" | t }}');
                    for (var i = 0; i <= 12; i++) {
                        if (i == 0) {
                            html += '<option value="">{{ "Month" | t }}</option>';
                        } else {
                            html += '<option value="' + i + '">' + monthNames[i] + '</option>';
                        }
                    }
                    html += '</select>';
                    html += '<select name="custom[' + index + '][year]" class="product-configure-custom-option-date-year">';
                    var currentYear = new Date().getFullYear();
                    for (var i = (currentYear + 10); i >= 1900; i--) {
                        if (i == (currentYear + 10)) {
                            html += '<option value="">{{ "Year" | t }}</option>';
                        } else {
                            html += '<option value="' + i + '">' + i + '</option>';
                        }
                    }
                    html += '</select>';
                    html += '</div>';
                    html += '</div>';
                    break;
            }
            html += '<div class="product-configure-clear"></div>';
            html += '</div>';
        });
        html += '</div>';
    }
    return html;
}

function shopnow_getCartQuantityHTML(data, dataProduct) {
    var product = data.product;
    var shop = data.shop;
    var html = '';
    if (product.stock.available == true) {
        html += '<div class="col-md-12 col-sm-12 grey succesRow paddingsm text-center"><div class="quantity col-md-5 col-sm-5 nopadding">';
    } else {
        html += '<div class="col-md-12 col-sm-12 grey succesRow paddingsm text-center"><div class="quantity col-md-5 col-sm-5 nopadding" style="display: none;">';
    }
    html += '<input type="text" name="quantity" class="form-control input-number" value="' + product.quantity + '" />';
    html += '</div>';
    return html;
}

function shopnow_getCartPricesHTML(data, dataProduct) {
    var product = data.product;
    var shop = data.shop;
    var html = '';
    html += '<div class="pricing">';
    if (dataProduct.price.price_old) {
        html += '<p class="price price-offer">';
        html += '<span class="border">';
        if (data.shop.b2b == true) {
            html += '<span class="price-old">' + dataProduct.price.price_old_excl_money;
            if (shop.settings.legal.mode == 'strict') {
                html += ' ' + data.shop.settings.legal.uvpHTML
            };
            html += '</span>';
            html += '<span class="price-new">' + dataProduct.price.price_excl_money + '</span>';
        } else {
            html += '<span class="price-old">' + dataProduct.price.price_old_incl_money;
            if (shop.settings.legal.mode == 'strict') {
                html += ' ' + data.shop.settings.legal.uvpHTML
            };
            html += '</span>';
            html += '<span class="price-new">' + dataProduct.price.price_incl_money + '</span>';
        }
        html += '</span>';
        html += '</p>';
    } else {
        html += '<p class="price">';
        if (data.shop.b2b == true) {
            html += dataProduct.price.price_excl_money;
        } else {
            html += dataProduct.price.price_incl_money;
        }
        html += '</p>';
    }
    html += '<div class="price-tax">';
    if (data.shop.b2b == true) {
        html += '{{ "Excl. VAT" | t }}';
    } else {
        html += '{{ "Incl. VAT" | t }}';
    }
    if (shop.settings.legal.mode == 'strict') {
        html += '<br />{{ ' Excl.$1 ' | t(' <a href = "' ~ 'service/shipping-returns' | url ~ '" target = "_blank" > ' ~ ' Shipping costs ' | t ~ ' </a>') | raw }}';}
        html += '</div>';
        html += '</div></div></div>';
        return html;
    }

    function shopnow_formatOptionPrice(value, data) {
        var price = '';
        if (value.percentage == true) {
            if (value.price > 0) {
                price = ' (+' + value.price + '%)';
            } else if (value.price < 0) {
                price = ' (' + value.price + '%)';
            }
        } else {
            if (value.price > 0) {
                price = ' (+' + shopnow_formatPrice(value.price, data) + ')';
            } else if (value.price < 0) {
                price = ' (' + shopnow_formatPrice(value.price, data) + ')';
            }
        }
        return price;
    }

    function shopnow_formatPrice(value, data, convert) {
        convert = typeof convert !== 'undefined' ? convert : true;
        var product = data.product;
        var shop = data.shop;
        if (convert == true) {
            value = shopnow_convertCurrency(data, value);
        }
        return data.shop.currency2.symbol + '' + value.formatMoney(2, ',', '.');
    }

    function shopnow_convertCurrency(data, value) {
        if (!isNaN(data.customPriceConversion - 0) && data.customPriceConversion != null) {
            value = (value / data.customPriceConversion);
        }
        return value;
    }

    function shopnow_updateForm(data, dataProduct, cartAtts, changeObj) {
        var product = data.product;
        var shop = data.shop;
        var currentVariant = $(cartAtts.popupSelector + ' .popup-product-variants');
        if (currentVariant.length > 0) {
            if (data.shop.b2b == true) {
                var oldPrice = data.product.variants[currentVariant.val()].price.price_old_excl;
                var currentPrice = data.product.variants[currentVariant.val()].price.price_excl;
            } else {
                var oldPrice = dataProduct.variants[currentVariant.val()].price.price_old_incl;
                var currentPrice = dataProduct.variants[currentVariant.val()].price.price_incl;
            }
        } else {
            if (data.shop.b2b == true) {
              var oldPrice = dataProduct.price.price_old_excl;
              var currentPrice = dataProduct.price.price_excl;
            } else {
              var oldPrice = dataProduct.price.price_old_incl;
              var currentPrice = dataProduct.price.price_incl;
            }
        }
        if (oldPrice != false) {
            oldPrice = shopnow_convertCurrency(data, oldPrice);
        }
        currentPrice = shopnow_convertCurrency(data, currentPrice);
        var optionPriceTotal = 0;
        var addValue = 0;
        $(cartAtts.popupSelector + ' .product-configure-custom .product-configure-custom-option').each(function() {
            $(this).find('input[type="checkbox"]:checked').each(function() {
                addValue = shopnow_getPriceFromText(data, $(this).parent().children('label[for="' + $(this).attr('id') + '"]').html());
                if (!isNaN(addValue) && addValue != null) {
                    optionPriceTotal += addValue;
                }
            });
            $(this).find('input[type="radio"]:checked').each(function() {
                addValue = shopnow_getPriceFromText(data, $(this).parent().children('label[for="' + $(this).attr('id') + '"]').html());
                if (!isNaN(addValue) && addValue != null) {
                    optionPriceTotal += addValue;
                }
            });
            $(this).find('select option:selected').each(function() {
                addValue = shopnow_getPriceFromText(data, $(this).html());
                if (!isNaN(addValue) && addValue != null) {
                    optionPriceTotal += addValue;
                }
            });
        })
        if (oldPrice != false) {
            oldPrice = shopnow_formatPrice(oldPrice + optionPriceTotal, data, false);
            if (shop.settings.legal.mode == 'strict') {
                oldPrice += ' ' + shop.settings.legal.uvpHTML
            };
        }
        currentPrice = shopnow_formatPrice(currentPrice + optionPriceTotal, data, false);
        if (currentVariant.length > 0) {
            $(cartAtts.popupSelector + ' a.add-to-cart').attr('data-id', currentVariant.val());
            $(cartAtts.popupSelector + ' #product_configure_form').attr('action', shop.domains.normal + cartAtts.addToCartUrlPrefix + currentVariant.val() + '/');
        }
        if (oldPrice != false) {
            $(cartAtts.popupSelector + ' .pricing .price').html('<span class="border"><span class="price-old">' + oldPrice + '</span><span class="price-new">' + currentPrice + '</span></span>');
            $(cartAtts.popupSelector + ' .pricing .price').addClass('price-offer');
        } else {
            $(cartAtts.popupSelector + ' .pricing .price').html(currentPrice);
            $(cartAtts.popupSelector + ' .pricing .price').removeClass('price-offer');
        }
        var stock = false;
        if (currentVariant.length > 0) {
            if (data.product.variants[currentVariant.val()].stock.available == true) {
                stock = true;
            }
        } else {
            if (data.product.stock.available == true) {
                stock = true;
            }
        }
        if (stock == true) {
            $(cartAtts.popupSelector + ' .quantity').fadeIn('fast');
            $(cartAtts.popupSelector + ' a.add-to-cart').fadeIn('fast');
            $(cartAtts.popupSelector + ' .out-of-stock').fadeOut('fast');
        } else {
            $(cartAtts.popupSelector + ' .quantity').fadeOut('fast');
            $(cartAtts.popupSelector + ' a.add-to-cart').fadeOut('fast');
            $(cartAtts.popupSelector + ' .out-of-stock').fadeIn('fast');
        }
    }

    function shopnow_getPriceFromText(data, val) {
        if (val.search(data.shop.currency2.symbol) == -1 || val.lastIndexOf(data.shop.currency2.symbol) < 0 || val.indexOf(data.shop.currency2.symbol) < 0) {
            return null;
        }
        val = val.substring(val.lastIndexOf(data.shop.currency2.symbol) + 1);
        val = val.replace(/[^0-9-]/g, '');
        valInt = val.substring(0, val.length - 2);
        valDecimals = val.substring(val.length - 2);
        val = valInt + '.' + valDecimals;
        val = parseFloat(val);
        return val;
    }
    if (Number.prototype.formatMoney == undefined) {
        Number.prototype.formatMoney = function(c, d, t) {
            var n = this,
                c = isNaN(c = Math.abs(c)) ? 2 : c,
                d = d == undefined ? "." : d,
                t = t == undefined ? "," : t,
                s = n < 0 ? "-" : "",
                i = parseInt(n = Math.abs(+n || 0).toFixed(c)) + "",
                j = (j = i.length) > 3 ? j % 3 : 0;
            return s + (j ? i.substr(0, j) + t : "") + i.substr(j).replace(/(\d{3})(?=\d)/g, "$1" + t) + (c ? d + Math.abs(n - i).toFixed(c).slice(2) : "");
        };
    };
    if (typeof ObjectLength != 'function') {
        function ObjectLength(object) {
            var length = 0;
            for (var key in object) {
                if (object.hasOwnProperty(key)) {
                    ++length;
                }
            }
            return length;
        };
    }
    if ($.fn.serializeObject == undefined) {
        $.fn.serializeObject = function() {
            var o = {};
            var a = this.serializeArray();
            $.each(a, function() {
                if (o[this.name]) {
                    if (!o[this.name].push) {
                        o[this.name] = [o[this.name]];
                    }
                    o[this.name].push(this.value || '');
                } else {
                    o[this.name] = this.value || '';
                }
            });
            return o;
        };
    };
</script>
